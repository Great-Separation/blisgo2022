buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }

    dependencies {
        classpath "org.flywaydb:flyway-mysql:+"
    }
}

plugins {
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id "org.flywaydb.flyway" version '9.21.1'
    id 'java'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.jetbrains:annotations:+'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.yaml:snakeyaml:+'

    implementation 'org.slf4j:slf4j-api:2.0.7'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'

    // 롬복은 쓰기 싫은데, Builder는 필요해서 가져옴
    compileOnly 'io.soabase.record-builder:record-builder-core:+'
    annotationProcessor 'io.soabase.record-builder:record-builder-processor:+'

    //Cloudinary 클라우드 스토리지
    implementation 'com.cloudinary:cloudinary-core:+'
    implementation 'com.cloudinary:cloudinary-http44:+'
    implementation 'com.cloudinary:cloudinary-taglib:+'

    //Algolia 검색엔진
    implementation 'com.algolia:algoliasearch-core:+'
    implementation 'com.algolia:algoliasearch-apache:+'
    implementation 'com.algolia:algoliasearch-java-net:+'
    implementation 'com.algolia:algoliasearch-apache-uber:+'

    //Hibernate
    implementation 'org.hibernate:hibernate-core:+'
    implementation 'org.hibernate.validator:hibernate-validator'


    // QueryDSL. over Springboot 3.0
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //MapStuct(DTO->Entity 변환. type-safe bean)
    implementation "org.mapstruct:mapstruct:+"
    annotationProcessor "org.mapstruct:mapstruct-processor:+"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:+"

    //aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    // 테스트 서버 h2
    testImplementation 'com.h2database:h2'

    // 객체 모니터링
    implementation 'org.javers:javers-core:+'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
}

// QueryDsl options
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [ querydslDir ]
}

clean.doLast {
    file(querydslDir).deleteDir()
}


flyway {
    //prod
    url = 'jdbc:mysql://avnadmin:AVNS_La_DidM8gznKaCox7Ye@blisgo-blisgo.aivencloud.com:20548/defaultdb?ssl-mode=REQUIRED&serverTimezone=Asia/Seoul&useUnicode=true&characterEncoding=utf8'
    user = 'avnadmin'
    password = 'AVNS_La_DidM8gznKaCox7Ye'

    cleanDisabled = false
    // driver = 'com.mysql.jdbc.Driver'  기본으로 등록되어있다.
}
flywayMigrate.dependsOn classes

manifest {
    attributes 'Main-Class': 'com.blisgo.BlisgoApplication'
}

tasks.named('test') {
    useJUnitPlatform()
}