plugins {
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id "org.flywaydb.flyway" version '+'
    id 'java'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    testImplementation 'org.springframework.batch:spring-batch-test'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // 템플릿 엔진(thymeleaf)
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.springframework.session:spring-session-core'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // 설정 제어 (properties, yml)
    implementation 'org.yaml:snakeyaml:+'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // 마이그레이션
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    // 로그
    implementation 'org.slf4j:slf4j-api:+'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'


    // Record builder
    compileOnly 'io.soabase.record-builder:record-builder-core:+'
    annotationProcessor 'io.soabase.record-builder:record-builder-processor:+'

    //Cloudinary 클라우드 스토리지
    implementation 'com.cloudinary:cloudinary-core:+'
    implementation 'com.cloudinary:cloudinary-http44:+'

    //Algolia 검색엔진
    implementation 'com.algolia:algoliasearch-core:+'
    implementation 'com.algolia:algoliasearch-apache:+'
    implementation 'com.algolia:algoliasearch-java-net:+'
    implementation 'com.algolia:algoliasearch-apache-uber:+'

    //Hibernate
    implementation 'org.hibernate:hibernate-core:+'
    implementation 'org.hibernate.validator:hibernate-validator'

    // QueryDSL. over Springboot 3.0
    implementation 'com.querydsl:querydsl-jpa:+:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:+:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //MapStuct(DTO->Entity 변환. type-safe bean)
    implementation "org.mapstruct:mapstruct:+"
    annotationProcessor "org.mapstruct:mapstruct-processor:+"

    //aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    // 테스트 서버 h2
    testImplementation 'com.h2database:h2'

    // 객체 모니터링
    implementation 'org.javers:javers-core:+'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
}

// QueryDsl options
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
    main.java.srcDirs += [querydslDir]
}

clean.doLast {
    file(querydslDir).deleteDir()
}


flyway {
    //dev
    url = 'jdbc:' + System.getenv('MYSQL_URL')
    user = System.getenv('MYSQLUSER')
    password = System.getenv('MYSQLPASSWORD')

    cleanDisabled = false
}
flywayMigrate.dependsOn classes

manifest {
    attributes 'Main-Class': 'com.blisgo.BlisgoApplication'
}

tasks.named('test') {
    useJUnitPlatform()
}