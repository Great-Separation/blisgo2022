buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }

    dependencies {
        classpath "org.flywaydb:flyway-mysql:9.3.1"
    }
}

plugins {
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java'
    id "org.flywaydb.flyway" version '9.3.1'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.jetbrains:annotations:latest.release'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.batch:spring-batch-test'

    //Cloudinary 클라우드 스토리지
    //noinspection GradlePackageVersionRange
    implementation 'com.cloudinary:cloudinary-core:latest.release'
    implementation 'com.cloudinary:cloudinary-http44:latest.release'
    implementation 'com.cloudinary:cloudinary-taglib:latest.release'

    //Algolia 검색엔진
    implementation 'com.algolia:algoliasearch-core:latest.release'
    implementation 'com.algolia:algoliasearch-apache:latest.release'
    implementation 'com.algolia:algoliasearch-java-net:latest.release'
    implementation 'com.algolia:algoliasearch-apache-uber:latest.release'

    //Hibernate
    implementation 'org.hibernate:hibernate-core'
    implementation 'org.hibernate.validator:hibernate-validator'

    //QueryDSL JPA
    // querydsl 디펜던시 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    annotationProcessor(
            "javax.persistence:javax.persistence-api",
            "javax.annotation:javax.annotation-api",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

    //MapStuct(DTO->Entity 변환. type-safe bean)
    implementation "org.mapstruct:mapstruct:latest.release"
    annotationProcessor "org.mapstruct:mapstruct-processor:latest.release"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:latest.release"

    //aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-configuration-processor'

    // 테스트 서버 h2
    testImplementation 'com.h2database:h2'

    // 객체 모니터링
    implementation 'org.javers:javers-core:latest.release'

    // spring security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
}

clean {
    delete file('src/main/generated') // Annotation processor 생성물 생성 위치
}

compileJava {
    options.compilerArgs << '-Aquerydsl.generatedAnnotationClass=com.querydsl.core.annotations.Generated'
}

flyway {
    //prod
    url = 'jdbc:mysql://ble5mmo2o5v9oouq.cbetxkdyhwsb.us-east-1.rds.amazonaws.com:3306/y3x4bvgs6r1un7cq?&serverTimezone=Asia/Seoul&useUnicode=true&characterEncoding=utf8'
    user = 'b7y3nvk6ini8s9pa'
    password = 'ute85ortnqmipr4o'

    cleanDisabled = false
    // driver = 'com.mysql.jdbc.Driver'  기본으로 등록되어있다.
}
flywayMigrate.dependsOn classes

// plain 파일 생성하지 않음으로 MANIFEST.MF(no main manifest attrubute in) 오류 방지
jar {
    enabled = false
}

manifest {
    attributes 'Main-Class': 'com.blisgo.BlisgoApplication'
}

tasks.named('test') {
    useJUnitPlatform()
}

